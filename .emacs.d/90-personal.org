#+TITLE: Personal

* Header
Enable lexical binding. When visiting the tangled file, enable read
only mode.

#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el --- Personal configuration -*- lexical-binding: t; buffer-read-only: t; -*-

  ;;; Commentary:

  ;; Personal configuration, me and my computers. Part of Koekelas'
  ;; Emacs configuration.

  ;;; Code:
#+END_SRC

Require libraries.

#+BEGIN_SRC emacs-lisp
  (require 'subr-x)
#+END_SRC

* Identity
Set name and e-mail.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Nicolas De Jaeghere")
  (setq user-mail-address "nicolas@dejaeghe.re")
#+END_SRC

Retrieve secrets from the [[https://specifications.freedesktop.org/secret-service/][Secret Service]].

#+BEGIN_SRC emacs-lisp
  (use-package auth-source
    :defer t
    :config
    (setq auth-sources '("secrets:Login")))
#+END_SRC

* File & directory names
Define well known file and directory names.

#+BEGIN_SRC emacs-lisp
  (defconst koek/home-dir-kratos "d:/"
    "File name to home directory on Kratos.")

  (defconst koek/home-dir
    (if (file-exists-p koek/home-dir-kratos)
        koek/home-dir-kratos
      "~/")
    "File name to home directory.")

  (defconst koek/documents-dir
    ;; mu4e chokes on symbolic links
    (file-truename (expand-file-name "Documenten/" koek/home-dir))
    "File name to documents directory.")

  (defconst koek/projects-dir
    (file-truename (expand-file-name "Projecten/" koek/home-dir))
    "File name to projects directory.")

  (defconst koek/static-agenda-files
    (mapcar (lambda (file-name)
              (expand-file-name file-name koek/documents-dir))
            '("Inbox.org" "Kalenders/Afspraken.org"))
    "List of file names to static agenda files.")
#+END_SRC

* Agendas
When a file is member of ~koek/static-agenda-files~ or matches pattern
=KOEK_PROJECTS_DIR/PROJECT_NAME/PROJECT_NAME.org=, it's an agenda
file.

Configure agendas.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :preface
    (defun koek/fetch-directories (file-name &optional full)
      "Return directories in directory FILE-NAME.
  When optional FULL is truthy, return absolute file names."
      (thread-last (directory-files-and-attributes file-name full)
        (seq-filter (pcase-lambda (`(,file-name ,type))
                      (let ((name (file-name-nondirectory file-name)))
                        (and (eq type t)  ; Directory
                             (not (or (string= name ".") (string= name "..")))))))
        (mapcar (lambda (spec)
                  (file-name-as-directory (car spec))))))

    (defun koek/fetch-agenda-files ()
      "Return agenda files."
      (append
       koek/static-agenda-files
       (thread-last (koek/fetch-directories koek/projects-dir 'full)
         (mapcar
          (lambda (file-name)
            (expand-file-name
             (concat (file-name-nondirectory (directory-file-name file-name))
                     ".org")
             file-name)))
         (seq-filter #'file-exists-p))))

    (define-advice
        org-agenda-files (:before (&rest _args) koek/update-agenda-files)
      (setq org-agenda-files (koek/fetch-agenda-files)))
    :config
    (setq org-directory koek/documents-dir)
    (setq org-refile-targets
          '((nil . (:maxlevel . 3))       ; Current
            (koek/fetch-agenda-files . (:maxlevel . 3)))))

  (use-package org-capture
    :defer t
    :config
    (setq org-capture-templates
          `(("t" "Task" entry (file+olp "Inbox.org" "Taken")
             "* TODO %?"
             :empty-lines 1)
            ("a" "Appointment" entry (file "Kalenders/Afspraken.org")
             ,(string-join '("* %^{Name}"
                             "%^T"
                             "%^{LOCATION}p" ; Inserted after heading
                             "%?")
                           "\n")
             :empty-lines 1)
            ("b" "Book" item (file+olp "Inbox.org" "Media tips" "Boeken")
             "- [[%x][%^{Title}]]%?"))))
#+END_SRC

** Calendars
To generate the app password, follow [[https://www.fastmail.com/help/clients/apppassword.html][App Passwords (FastMail)]]. Name it
=Emacs calendar= and give it access to CalDAV. Then, to store it
securely, run:

#+BEGIN_SRC sh
  secret-tool store --label="Emacs calendar personal" host "caldav.fastmail.com:443" port "https" user "nicolas@dejaeghe.re"
#+END_SRC

For more information, see [[info:auth#Help%20for%20users][Help for users (info)]], specifically the
explanation of URL authentication.

Configure calendars. For calendar details, login to [[https://www.fastmail.com/][FastMail]], click
=Settings=, =Calendars=. Then, for the desired calendar, click
=Export=.

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer t
    :config
    ;; Local copy
    (let ((calendars-dir (expand-file-name "Kalenders/" koek/documents-dir)))
      ;; Store sync state with calendars, simplifying backup
      (setq org-caldav-save-directory calendars-dir)
      (setq org-caldav-inbox (expand-file-name "Afspraken.org" calendars-dir))
      (setq org-caldav-files (list org-caldav-inbox)))

    ;; Remote copy
    (setq org-caldav-url
          "https://caldav.fastmail.com/dav/calendars/user/nicolas@dejaeghe.re")
    (setq org-caldav-calendar-id "260b63a1-58cd-4cf2-bf6a-a2e5acfcf995"))
#+END_SRC

* E-mail accounts
Configure e-mail accounts.

#+BEGIN_SRC emacs-lisp
  (use-package mu4e-vars
    :defer t
    :config
    (defvar mu4e-bookmarks)
    (defvar mu4e-drafts-folder)
    (defvar mu4e-maildir)
    (defvar mu4e-refile-folder)
    (defvar mu4e-sent-folder)
    (defvar mu4e-trash-folder)

    ;; maildir, refile-folder, drafts-folder, sent-folder and
    ;; trash-folder are directory file names (i.e. no end /)
    (setq mu4e-maildir (expand-file-name "E-mail" koek/documents-dir))
    (setq mu4e-refile-folder "/Personal/Archive")
    (setq mu4e-drafts-folder "/Personal/Drafts")
    (setq mu4e-sent-folder "/Personal/Sent")
    (setq mu4e-trash-folder "/Personal/Trash")

    (use-package mu4e-context
      :config
      (defvar mu4e-contexts)
      (declare-function make-mu4e-context "mu4e-context")
      (declare-function mu4e-message-field "mu4e-message")

      (setq mu4e-contexts
            (list (make-mu4e-context
                   :name "Personal"
                   :match-func
                   (lambda (message)
                     (when message
                       (string-prefix-p "/Personal/"
                                        (mu4e-message-field message :maildir))))
                   :vars
                   `((mu4e-refile-folder . ,mu4e-refile-folder)
                     (mu4e-drafts-folder . ,mu4e-drafts-folder)
                     (mu4e-sent-folder   . ,mu4e-sent-folder)
                     (mu4e-trash-folder  . ,mu4e-trash-folder))))))

    (use-package mu4e-utils
      :config
      (declare-function make-mu4e-bookmark "mu4e-utils")

      (setq mu4e-bookmarks
            (list (make-mu4e-bookmark :name "Unread"
                                      :query "flag:unread"
                                      :key ?u)
                  (make-mu4e-bookmark :name "Personal INBOX"
                                      :query "maildir:/Personal/INBOX"
                                      :key ?p)))))
#+END_SRC

* News feeds
Configure news feeds.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :preface
    (declare-function elfeed-db-get-feed "elfeed-db")
    (declare-function elfeed-meta--put "elfeed-db")

    (defconst koek/feeds
      '(("3Blue1Brown" youtube "UCYO_jab_esuFRV4b17AJtAw" mathematics)
        ("Arch Linux" "https://www.archlinux.org/feeds/news/" notice linux)
        ("Baggers" youtube "UCMV8p6Lb-bd6UZtTc_QD4zA" lisp)
        ("Caches to Caches" "http://cachestocaches.com/feed" blog ai)
        ("Clickspring" youtube "UCworsKCR-Sx6R6-BnIjS2MA" metalwork)
        ("Clojure" reddit top "Clojure" clojure)
        ("ClojureTV" youtube "UCaLlzGqiPE2QRj6sSOawJRg" clojure)
        ("Emacs" reddit "emacs" emacs)
        ("Erlang Solutions" youtube "UCKrD_GYN3iDpG_uMmADPzJQ" erlang)
        ("Erlang" reddit top "erlang" erlang)
        ("Furniture Making" reddit top "FurnitureMaking" woodwork)
        ("Ishitani Furniture" youtube "UC7FkqjV8SU5I8FCHXQSQe9Q" woodwork)
        ("John Heisz" youtube "UCjA8vRlL1c7BDixQRJ39-LQ" woodwork)
        ("LEGO" reddit top "lego" lego)
        ("Layout Land" youtube "UC7TizprGknbDalbHplROtag" css)
        ("Linux" reddit top "linux" linux)
        ("Lisp" reddit top "lisp" lisp)
        ("LiveOverflow" youtube "UClcE-kVhqyiHCcjYwcpfj9w" hack)
        ("Luke Smith" youtube "UC2eYFnH61tmytImy1mTYvhA" foss)
        ("Mastering Emacs" "https://www.masteringemacs.org/feed" blog emacs)
        ("Netflix TechBlog" "https://medium.com/feed/netflix-techblog" blog ai)
        ("Professor Leonard" youtube "UCoHhuummRZaIVX7bD4t2czg" mathematics)
        ("Programming" reddit top "programming" program)
        ("ROBOHEMIAN!" youtube "GravityRoad" electronics)
        ("Rainfall Projects" youtube "UCPO4D4-UeeFQceK8XrgwXug" woodwork metalwork)
        ("Sacha Chua" "http://sachachua.com/blog/category/emacs/feed/" blog emacs)
        ("Two-Bit History" "https://twobithistory.org/feed.xml" blog history)
        ("Wait But Why" "https://waitbutwhy.com/feed" blog science)
        ("frank howarth" youtube "UC3_VCOJMaivgcGqPCTePLBA" woodwork)
        ("krtwood" youtube "UCrI3NWmFF45LwKwk5TEYihQ" woodwork)
        ("scanlime" youtube "UCaEgw3321ct_PE4PJvdhXEQ" electronics))
      "List of news feeds.
  News feed is a list of format:

  (\"title\" \"url\" tag-1 tag-2 tag-n)
  (\"title\" reddit \"id\" tag-1 tag-2 tag-n)
  (\"title\" reddit top \"id\" tag-1 tag-2 tag-n)
  (\"title\" youtube \"id\" tag-1 tag-2 tag-n)")

    (defun koek/add-feed (title url &rest tags)
      "Add news feed to the database.
  TITLE and URL are strings.  TAGS are zero or more symbols."
      (setf (elfeed-meta (elfeed-db-get-feed url) :title) title)
      (push (cons url tags) elfeed-feeds))
    :config
    (setq elfeed-db-directory
          (expand-file-name "Nieuws/elfeed/" koek/documents-dir))
    (mapc (lambda (feed)
            (let ((args
                   (pcase feed
                     (`(,title reddit top ,id . ,tags)
                      `(,(concat title " (Reddit - Top)")
                        ,(format "https://www.reddit.com/r/%s/top.rss?t=month" id)
                        post ,@tags))
                     (`(,title reddit ,id . ,tags)
                      `(,(concat title " (Reddit)")
                        ,(format "https://www.reddit.com/r/%s.rss" id)
                        post ,@tags))
                     (`(,title youtube ,id . ,tags)
                      `(,(concat title " (YouTube)")
                        ,(format "https://www.youtube.com/feeds/videos.xml?channel_id=%s" id)
                        video ,@tags))
                     (_feed
                      feed))))
              (apply #'koek/add-feed args)))
          koek/feeds))
#+END_SRC

* Initial buffer
Show agenda as initial buffer.

#+BEGIN_SRC emacs-lisp
  (defun koek/make-initial-buffer ()
    "Return initial buffer."
    (let ((layout (current-window-configuration)))
      (org-agenda-list)
      (set-window-configuration layout))
    (get-buffer "*Org Agenda*"))

  (setq initial-buffer-choice #'koek/make-initial-buffer)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el ends here
#+END_SRC

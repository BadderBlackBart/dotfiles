#+TITLE: Personal

* Header
Enable lexical binding. When visiting the tangled file, enable read
only mode.

#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el --- Personal configuration -*- lexical-binding: t; buffer-read-only: t; -*-

  ;;; Commentary:

  ;; Personal configuration, me and my computers. Part of Koekelas'
  ;; Emacs configuration.

  ;;; Code:
#+END_SRC

Require libraries.

#+BEGIN_SRC emacs-lisp
  (require 'subr-x)
#+END_SRC

* Name & e-mail
Set name and e-mail.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Nicolas De Jaeghere")
  (setq user-mail-address "nicodeja@gmail.com")
#+END_SRC

* File & directory names
Declare well known file and directory names.

#+BEGIN_SRC emacs-lisp
  (defconst koek/home-dir-kratos "d:/"
    "File name to home directory on Kratos.")

  (defconst koek/home-dir
    (if (file-exists-p koek/home-dir-kratos)
        koek/home-dir-kratos
      "~/")
    "File name to home directory.")

  (defconst koek/org-dir (expand-file-name "20 Documenten/Varia/" koek/home-dir)
    "File name to org directory.")

  (defconst koek/projects-dir (expand-file-name "21 Projecten/" koek/home-dir)
    "File name to projects directory.")

  (defconst koek/static-agenda-files
    (mapcar (lambda (file-name)
              (expand-file-name file-name koek/org-dir))
            '("To Do.org" "Afspraken.org" "Dagindeling.org"))
    "List of file names to static agenda files.")
#+END_SRC

* To-do's & agenda
When a file is member of ~koek/static-agenda-files~ or matches pattern
=KOEK_PROJECTS_DIR/PROJECT_NAME/PROJECT_NAME.org=, it's an agenda
file.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :preface
    (defun koek/fetch-directories (file-name &optional full)
      "Return directories in directory FILE-NAME.
  When optional FULL is truthy, return absolute file names."
      (thread-last (directory-files-and-attributes file-name full)
        (seq-filter (pcase-lambda (`(,file-name ,type))
                      (let ((name (file-name-nondirectory file-name)))
                        (and (eq type t)  ; Directory
                             (not (or (string= name ".") (string= name "..")))))))
        (mapcar (lambda (spec)
                  (file-name-as-directory (car spec))))))

    (defun koek/fetch-agenda-files ()
      "Return agenda files."
      (append
       koek/static-agenda-files
       (thread-last (koek/fetch-directories koek/projects-dir 'full)
         (mapcar
          (lambda (file-name)
            (expand-file-name
             (concat (file-name-nondirectory (directory-file-name file-name))
                     ".org")
             file-name)))
         (seq-filter #'file-exists-p))))

    (define-advice
        org-agenda-files (:before (&rest _args) koek/update-agenda-files)
      (setq org-agenda-files (koek/fetch-agenda-files)))
    :config
    (setq org-directory koek/org-dir)
    (setq org-refile-targets
          '((nil . (:maxlevel . 3))       ; Current
            (koek/fetch-agenda-files . (:maxlevel . 3)))))

  (use-package org-capture
    :defer t
    :config
    (setq org-capture-templates
          '(("t" "Task" entry (file+olp "To Do.org" "Taken")
             "* TODO %?"
             :empty-lines 1)
            ("a" "Appointment" entry (file "Afspraken.org")
             "* %?"
             :empty-lines 1))))
#+END_SRC

* Initial buffer
Show agenda as initial buffer.

#+BEGIN_SRC emacs-lisp
  (defun koek/make-initial-buffer ()
    "Return initial buffer."
    (let ((layout (current-window-configuration)))
      (org-agenda-list)
      (set-window-configuration layout))
    (get-buffer "*Org Agenda*"))

  (setq initial-buffer-choice #'koek/make-initial-buffer)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el ends here
#+END_SRC

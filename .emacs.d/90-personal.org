#+TITLE: Personal

* Header
Enable lexical binding. When visiting the tangled file, enable read
only mode.

#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el --- Personal configuration -*- lexical-binding: t; buffer-read-only: t; -*-

  ;;; Commentary:

  ;; Personal configuration, me and my computers. Part of Koekelas'
  ;; Emacs configuration.

  ;;; Code:
#+END_SRC

* Name & e-mail
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Nicolas De Jaeghere")
  (setq user-mail-address "nicodeja@gmail.com")
#+END_SRC

* Files & directories
#+BEGIN_SRC emacs-lisp
  (defconst koek/home-dir-kratos
    "d:/"
    "File name to home directory on Kratos.")

  (defconst koek/home-dir
    (if (file-exists-p koek/home-dir-kratos)
        koek/home-dir-kratos
      (expand-file-name "~/"))
    "File name to home directory.")

  (defconst koek/org-dir
    (expand-file-name "20 Documenten/Varia/" koek/home-dir)
    "File name to org directory.")

  (defconst koek/projects-dir
    (expand-file-name "21 Projecten/" koek/home-dir)
    "File name to projects directory.")

  (defconst koek/static-agenda-files
    (mapcar (lambda (file-name)
              (expand-file-name file-name koek/org-dir))
            '("To Do.org" "Afspraken.org"))
    "List of file names to static agenda files.")
#+END_SRC

* To-do's & agenda
#+BEGIN_SRC emacs-lisp
  (use-package org
    :preface
    (defun koek/directories (file-name &optional full)
      "Return directories in directory FILE-NAME.
  When optional FULL is truthy, return absolute file names."
      (mapcar
       (lambda (spec)
         (concat (car spec) "/"))
       (seq-filter (pcase-lambda (`(,file-name ,type))
                     (let ((name (file-name-nondirectory file-name)))
                       (and (eq type t)   ; Directory
                            (not (or (string= name ".") (string= name ".."))))))
                   (directory-files-and-attributes file-name full))))

    (defun koek/agenda-files ()
      "Return agenda files."
      (append
       koek/static-agenda-files
       (seq-filter
        #'file-exists-p
        (mapcar (lambda (file-name)
                  (concat file-name
                          (file-name-nondirectory (directory-file-name file-name))
                          ".org"))
                (koek/directories koek/projects-dir 'full)))))

    (define-advice
        org-agenda-files (:before (&rest _args) koek/update-agenda-files)
      (setq org-agenda-files (koek/agenda-files)))

    :config
    (defvar org-capture-templates)

    (setq org-directory koek/org-dir)
    (setq org-capture-templates
          '(("t" "Task" entry (file+olp "To Do.org" "Taken")
             "* TODO %?"
             :empty-lines 1)
            ("a" "Appointment" entry (file "Afspraken.org")
             "* %?"
             :empty-lines 1)))
    (setq org-refile-targets
          '((nil . (:maxlevel . 3))       ; Current
            (koek/agenda-files . (:maxlevel . 3)))))
#+END_SRC

* Initial buffer
Show agenda.

#+BEGIN_SRC emacs-lisp
  (defun koek/initial-buffer ()
    "Return initial buffer."
    (org-agenda-list)
    ;; Hide agenda so scratch is replaced
    (delete-window)
    (get-buffer "*Org Agenda*"))

  (setq initial-buffer-choice #'koek/initial-buffer)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el ends here
#+END_SRC

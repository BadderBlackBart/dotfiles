#+TITLE: Personal
#+PROPERTY: header-args:emacs-lisp :lexical yes

* Header
Enable lexical binding. When visiting the tangled file, enable read
only mode.

#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el --- Personal configuration -*- lexical-binding: t; buffer-read-only: t; -*-

  ;;; Commentary:

  ;; Personal configuration, me and my computers. Part of Koekelas'
  ;; Emacs configuration.

  ;;; Code:
#+END_SRC

Require libraries.

#+BEGIN_SRC emacs-lisp
  (require 'subr-x)
  (require 'seq)
#+END_SRC

* Monitors
#+BEGIN_SRC emacs-lisp
  (use-package exwm-randr
    :after exwm
    :preface
    (defun koek/setup-monitors ()
      "Setup monitors."
      (make-process :name "xrandr"
                    :command '("xrandr" "--output" "HDMI-1" "--primary")))
    :config
    (declare-function exwm-enable "exwm")
    (declare-function exwm-randr-enable "exwm-randr")

    (setq exwm-randr-workspace-monitor-plist '(1 "eDP-1"))
    (add-hook 'exwm-randr-screen-change-hook #'koek/setup-monitors)

    (exwm-randr-enable)
    (exwm-enable))
#+END_SRC

* Well known directories
Define well known directories.

#+BEGIN_SRC emacs-lisp
  (defun koek/resolve-directory (name default)
    "Resolve directory in environment variable NAME.
  When environment variable is unset, resolve directory DEFAULT."
    (file-name-as-directory (file-truename (or (getenv name) default))))

  (defconst koek/documents-dir
    (koek/resolve-directory "XDG_DOCUMENTS_DIR" "~/Documenten/")
    "File name to documents directory.")

  (defconst koek/projects-dir
    (koek/resolve-directory "KOEK_PROJECTS_DIR" "~/Projecten/")
    "File name to projects directory.")

  (defconst koek/calendars-dir
    (koek/resolve-directory "KOEK_CALENDARS_DIR"
                            (expand-file-name "Kalenders/" koek/documents-dir))
    "File name to calendars directory.")

  (defconst koek/email-dir
    (koek/resolve-directory "KOEK_EMAIL_DIR"
                            (expand-file-name "E-mail/" koek/documents-dir))
    "File name to e-mail directory.")

  (defconst koek/news-dir
    (koek/resolve-directory "KOEK_NEWS_DIR"
                            (expand-file-name "Nieuws/" koek/documents-dir))
    "File name to news directory.")
#+END_SRC

* Secrets
Retrieve secrets from the [[https://freedesktop.org/wiki/Specifications/secret-storage-spec/][Secret Service]].

#+BEGIN_SRC emacs-lisp
  (use-package auth-source
    :defer t
    :config
    (setq auth-sources '("secrets:Login")))
#+END_SRC

* Agendas
Org files in ~koek/documents-dir~, ~koek/calendars-dir~ and in
subdirectories of ~koek/projects-dir~, are agenda files.

Configure agendas.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :preface
    (defun koek/get-subdirectories (file-name &optional full)
      "Return subdirectories in directory FILE-NAME.
  When optional FULL is truthy, return absolute file names."
      (thread-last (directory-files-and-attributes file-name full)
        (seq-filter (pcase-lambda (`(,file-name ,type))
                      (let ((name (file-name-nondirectory file-name)))
                        (and (eq type t)  ; Directory
                             (not (or (string= name ".") (string= name "..")))))))
        (mapcar (lambda (spec)
                  (file-name-as-directory (car spec))))))

    (define-advice org-agenda-files
        (:before (&rest _args) koek/update-agenda-files)
      (setq org-agenda-files
            (seq-mapcat
             (lambda (file-name)
               (directory-files file-name 'full (rx ".org" line-end)))
             (append (list koek/documents-dir koek/calendars-dir)
                     (koek/get-subdirectories koek/projects-dir 'full)))))
    :config
    (setq org-directory koek/documents-dir)
    (setq org-refile-targets
          '((nil . (:maxlevel . 3))       ; Current
            (koek/fetch-agenda-files . (:maxlevel . 3)))))

  (use-package org-capture
    :defer t
    :config
    (setq org-capture-templates
          `(("j" "Journal" entry (file+olp+datetree "Inbox.org" "Journaal")
             "* %?"
             :empty-lines 1)
            ("t" "Task" entry (file+olp "Inbox.org" "Taken")
             "* TODO %?"
             :empty-lines 1)
            ("a" "Appointment" entry (file "Kalenders/Afspraken.org")
             ,(string-join '("* %^{Name}"
                             "%^T"
                             "%^{LOCATION}p" ; Inserted after heading
                             "%?")
                           "\n")
             :empty-lines 1)
            ("r" "Reply" entry (file+olp "Inbox.org" "Taken")
             ,(string-join '("* TODO Beantwoord %:subject"
                             "DEADLINE: %^t"
                             ""
                             "%a"
                             ""
                             "%?")
                           "\n")
             :empty-lines 1)
            ("b" "Book" item (file+olp "Inbox.org" "Media tips" "Boeken")
             "- [[%x][%^{Title}]]%?")))
    (setq org-capture-templates-contexts '(("r" ((in-mode . "mu4e-view-mode"))))))
#+END_SRC

** Calendars
To generate the app password, follow [[https://www.fastmail.com/help/clients/apppassword.html][App Passwords (FastMail)]]. Name it
=Emacs calendars= and give it access to CalDAV. Then, to store it
securely, run:

#+BEGIN_SRC sh
  secret-tool store --label="Emacs calendars personal" host "caldav.fastmail.com:443" port "https" user "nicolas@dejaeghe.re"
#+END_SRC

For more information, see [[info:auth#Help for users][Help for users (info)]], specifically the
explanation of URL authentication.

Configure calendars. For calendar details, login to [[https://www.fastmail.com/][FastMail]], click
=Settings=, =Calendars=. Then, for the desired calendar, click
=Export=.

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer t
    :config
    ;; Local copy
    ;; Store sync state with calendars, simplifying backup
    (setq org-caldav-save-directory koek/calendars-dir)
    (setq org-caldav-inbox (expand-file-name "Afspraken.org" koek/calendars-dir))
    (setq org-caldav-files ())

    ;; Remote copy
    (setq org-caldav-url
          "https://caldav.fastmail.com/dav/calendars/user/nicolas@dejaeghe.re")
    (setq org-caldav-calendar-id "260b63a1-58cd-4cf2-bf6a-a2e5acfcf995"))

  (use-package ox-icalendar
    :defer t
    :config
    (setq org-icalendar-timezone "Europe/Brussels"))
#+END_SRC

* E-mail accounts
Configure e-mail accounts. For server details, see [[file:~/.ststore/documents/Projecten/Dotfiles/dotfiles/dotfiles.org::*isync][isync]], specifically
the instructions on storing passwords.

#+BEGIN_SRC emacs-lisp
  (use-package mu4e-vars
    :defer t
    :config
    ;; maildir, refile-folder, drafts-folder, sent-folder and
    ;; trash-folder are directory file names (i.e. no trailing /)
    (setq mu4e-maildir (directory-file-name koek/email-dir))

    (use-package mu4e-context
      :config
      (declare-function mu4e-message-field "mu4e-message")

      (setq mu4e-contexts
            (list (make-mu4e-context
                   :name "Personal"
                   :match-func
                   (lambda (message)
                     (when message
                       (string-prefix-p "/Personal/"
                                        (mu4e-message-field message :maildir))))
                   :vars
                   `((smtpmail-smtp-server   . "smtp.fastmail.com")
                     (smtpmail-smtp-service  . 465)
                     (smtpmail-stream-type   . ssl)
                     (mu4e-refile-folder     . "/Personal/Archive")
                     (mu4e-drafts-folder     . "/Personal/Drafts")
                     (mu4e-sent-folder       . "/Personal/Sent")
                     (mu4e-trash-folder      . "/Personal/Trash")
                     (mu4e-compose-signature . ,user-full-name))))))

    (use-package mu4e-utils
      :config
      (setq mu4e-bookmarks
            (list (make-mu4e-bookmark :name "Personal INBOX"
                                      :query "maildir:/Personal/INBOX"
                                      :key ?p)
                  (make-mu4e-bookmark :name "Applied Artificial Intelligence"
                                      :query "maildir:/Personal/Opleidingen/AAI"
                                      :key ?a)
                  (make-mu4e-bookmark :name "Unread"
                                      :query "flag:unread"
                                      :key ?u)))))
#+END_SRC

* News feeds
Configure news feeds.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :preface
    (declare-function elfeed-db-get-feed "elfeed-db")
    (declare-function elfeed-meta--put "elfeed-db")

    (defconst koek/feeds
      '(("3Blue1Brown" youtube "UCYO_jab_esuFRV4b17AJtAw" mathematics)
        ("Arch Linux" "https://www.archlinux.org/feeds/news/" notice linux)
        ("Baggers" youtube "UCMV8p6Lb-bd6UZtTc_QD4zA" lisp)
        ("Caches to Caches" "http://cachestocaches.com/feed" blog ai)
        ("Clickspring" youtube "UCworsKCR-Sx6R6-BnIjS2MA" metalwork)
        ("Clojure" reddit month "Clojure" clojure)
        ("ClojureTV" youtube "UCaLlzGqiPE2QRj6sSOawJRg" clojure)
        ("Emacs" reddit "emacs" emacs)
        ("Erlang Solutions" youtube "UCKrD_GYN3iDpG_uMmADPzJQ" erlang)
        ("Erlang" reddit month "erlang" erlang)
        ("Factorio" "https://www.factorio.com/blog/rss" blog program)
        ("Furniture Making" reddit month "FurnitureMaking" woodwork)
        ("Ishitani Furniture" youtube "UC7FkqjV8SU5I8FCHXQSQe9Q" woodwork)
        ("John Heisz" youtube "UCjA8vRlL1c7BDixQRJ39-LQ" woodwork)
        ("LEGO" reddit month "lego" lego)
        ("Layout Land" youtube "UC7TizprGknbDalbHplROtag" css)
        ("Linux" reddit month "linux" linux)
        ("Lisp" reddit month "lisp" lisp)
        ("LiveOverflow" youtube "UClcE-kVhqyiHCcjYwcpfj9w" hack)
        ("Luke Smith" youtube "UC2eYFnH61tmytImy1mTYvhA" foss)
        ("Mastering Emacs" "https://www.masteringemacs.org/feed" blog emacs)
        ("Netflix TechBlog" "https://medium.com/feed/netflix-techblog" blog ai)
        ("Professor Leonard" youtube "UCoHhuummRZaIVX7bD4t2czg" mathematics)
        ("Programming" reddit month "programming" program)
        ("ROBOHEMIAN!" youtube "GravityRoad" electronics)
        ("Rainfall Projects" youtube "UCPO4D4-UeeFQceK8XrgwXug" woodwork metalwork)
        ("Sacha Chua" "http://sachachua.com/blog/category/emacs/feed/" blog emacs)
        ("Two-Bit History" "https://twobithistory.org/feed.xml" blog history)
        ("Wait But Why" "https://waitbutwhy.com/feed" blog popsci)
        ("frank howarth" youtube "UC3_VCOJMaivgcGqPCTePLBA" woodwork)
        ("krtwood" youtube "UCrI3NWmFF45LwKwk5TEYihQ" woodwork)
        ("scanlime" youtube "UCaEgw3321ct_PE4PJvdhXEQ" electronics))
      "List of news feeds.
  News feed is a list of format:

  (\"title\" \"url\" tag-1 tag-2 tag-n)
  (\"title\" reddit \"id\" tag-1 tag-2 tag-n)
  (\"title\" reddit month \"id\" tag-1 tag-2 tag-n)
  (\"title\" youtube \"id\" tag-1 tag-2 tag-n)

  Reddit news feeds are tagged with post and YouTube news feeds are
  tagged with video.")

    (defun koek/add-feed (title url &rest tags)
      "Add news feed to the database.
  TITLE and URL are strings.  TAGS are zero or more symbols."
      (setf (elfeed-meta (elfeed-db-get-feed url) :title) title)
      (push (cons url tags) elfeed-feeds))
    :config
    (setq elfeed-db-directory koek/news-dir)

    (use-package recentf
      :config
      (push elfeed-db-directory recentf-exclude))

    (mapc (lambda (feed)
            (let ((args
                   (pcase feed
                     (`(,title reddit month ,id . ,tags)
                      `(,(concat title " (Reddit - Month)")
                        ,(format "https://www.reddit.com/r/%s/top.rss?t=month" id)
                        post ,@tags))
                     (`(,title reddit ,id . ,tags)
                      `(,(concat title " (Reddit)")
                        ,(format "https://www.reddit.com/r/%s/top.rss?t=week" id)
                        post ,@tags))
                     (`(,title youtube ,id . ,tags)
                      `(,(concat title " (YouTube)")
                        ,(format "https://www.youtube.com/feeds/videos.xml?channel_id=%s" id)
                        video ,@tags))
                     (_feed
                      feed))))
              (apply #'koek/add-feed args)))
          koek/feeds))
#+END_SRC

* Initial buffer
Show agenda as initial buffer.

#+BEGIN_SRC emacs-lisp
  (defun koek/make-initial-buffer ()
    "Return initial buffer."
    (let ((layout (current-window-configuration)))
      (org-agenda-list)
      (set-window-configuration layout))
    (get-buffer "*Org Agenda*"))

  (setq initial-buffer-choice #'koek/make-initial-buffer)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el ends here
#+END_SRC

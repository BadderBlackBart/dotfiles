#+TITLE: Personal
#+PROPERTY: header-args:emacs-lisp :lexical yes

* Header
Enable lexical binding. When visiting the tangled file, enable read
only mode.

#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el --- Personal configuration -*- lexical-binding: t; buffer-read-only: t; -*-

  ;;; Commentary:

  ;; Personal configuration, me and my computers. Part of Koekelas'
  ;; Emacs configuration.

  ;;; Code:
#+END_SRC

Require libraries.

#+BEGIN_SRC emacs-lisp
  (require 'subr-x)
  (require 'seq)
#+END_SRC

* Secrets
Retrieve secrets from [[https://freedesktop.org/wiki/Specifications/secret-storage-spec/][Secret Service]].

#+BEGIN_SRC emacs-lisp
  (use-package auth-source
    :defer t
    :config
    (setq auth-sources '("secrets:Login")))
#+END_SRC

* Well known directories
Define well known directories.

#+BEGIN_SRC emacs-lisp
  (defun koek/resolve-directory (name default)
    "Resolve directory in environment variable NAME.
  When environment variable is unset, resolve directory DEFAULT."
    (file-name-as-directory (file-truename (or (getenv name) default))))

  (defconst koek/documents-dir
    (koek/resolve-directory "XDG_DOCUMENTS_DIR" "~/Documenten/")
    "File name to documents directory.")

  (defconst koek/projects-dir
    (koek/resolve-directory "KOEK_PROJECTS_DIR" "~/Projecten/")
    "File name to projects directory.")

  (defconst koek/calendars-dir
    (koek/resolve-directory "KOEK_CALENDARS_DIR"
                            (expand-file-name "Kalenders/" koek/documents-dir))
    "File name to calendars directory.")

  (defconst koek/notes-dir
    (koek/resolve-directory "KOEK_NOTES_DIR"
                            (expand-file-name "Notities/" koek/documents-dir))
    "File name to notes directory.")

  (defconst koek/news-dir
    (koek/resolve-directory "KOEK_NEWS_DIR"
                            (expand-file-name "Nieuws/" koek/documents-dir))
    "File name to news directory.")
#+END_SRC

* Monitors
Configure monitors and monitor layouts.

#+BEGIN_SRC emacs-lisp
  (use-package exar
    :load-path "lisp/exar"
    :after exwm
    :config
    (declare-function exwm-enable "exwm")

    (let ((icc-dir
           (expand-file-name "icc/"
                             (or (getenv "XDG_DATA_HOME") "~/.local/share/"))))
      (setq exar-monitors
            `(:laptop (:edid "0x06af3d13000000002617" :name "Laptop"
                       :color ,(expand-file-name "laptop.icc" icc-dir))
              :home (:edid "0x35491800000000000013" :name "Home"
                     :color ,(expand-file-name "home.icc" icc-dir))))
      (setq exar-layouts
            '((:name "Home (primary) and laptop"
               :monitors
               (:home (:top 0 :left 1920 :width 1920 :height 1080)
                :laptop (:top 0 :left 0 :width 1920 :height 1080 :workspaces (1 5))))
              (:name "Home"
               :monitors (:home (:top 0 :left 0 :width 1920 :height 1080)))
              (:name "Laptop"
               :monitors (:laptop (:top 0 :left 0 :width 1920 :height 1080))))))
    (exar-enable)
    (exwm-enable))
#+END_SRC

* Agendas
Org files in ~koek/documents-dir~, ~koek/calendars-dir~ and in
subdirectories of ~koek/projects-dir~, are agenda files.

Configure agendas.

#+BEGIN_SRC emacs-lisp
  (use-package org
    :defer t
    :preface
    (defun koek/lock-file-p (file-name)
      "Return whether file FILE-NAME is a lock file."
      (string-prefix-p ".#" (file-name-nondirectory file-name)))

    (defun koek/get-subdirs (file-name &optional full)
      "Return subdirectories in directory FILE-NAME.
  When optional FULL is truthy, return absolute file names."
      (thread-last (directory-files-and-attributes file-name full)
        (seq-filter (pcase-lambda (`(,file-name ,type))
                      (let ((name (file-name-nondirectory file-name)))
                        (and (eq type t)  ; Directory
                             (not (or (string= name ".") (string= name "..")))))))
        (mapcar (lambda (spec)
                  (file-name-as-directory (car spec))))))

    (defun koek/get-agenda-dirs ()
      "Return directories storing agenda files."
      (append (list koek/documents-dir koek/calendars-dir)
              (koek/get-subdirs koek/projects-dir 'full)))

    (defun koek/get-agenda-files ()
      "Return agenda files."
      (thread-last (koek/get-agenda-dirs)
        (seq-mapcat (lambda (file-name)
                      (directory-files file-name 'full (rx ".org" line-end))))
        (seq-filter (lambda (file-name)
                      (not (koek/lock-file-p file-name))))))

    (define-advice org-agenda-files
        (:before (&rest _args) koek/update-agenda-files)
      (setq org-agenda-files (koek/get-agenda-files)))
    :config
    (setq org-directory koek/documents-dir)
    (setq org-refile-targets
          '((nil . (:maxlevel . 3))       ; Current
            (org-agenda-files . (:maxlevel . 3)))))

  (use-package calendar
    :defer t
    :config
    (setq calendar-week-start-day 1))     ; Monday
#+END_SRC

** Calendars                                                          :setup:
To generate the app password, follow [[https://www.fastmail.com/help/clients/apppassword.html][App Passwords (FastMail)]]. Name it
=Emacs calendars= and give it access to CalDAV. Then, to store it
securely, run:

#+BEGIN_SRC sh
  secret-tool store --label="Emacs calendars personal" host "caldav.fastmail.com:443" port "https" user "nicolas@dejaeghe.re"
#+END_SRC

For more information, see [[info:auth#Help for users][Help for users (info)]], specifically the
explanation of URL authentication.

Configure calendars. For calendar details, login to [[https://www.fastmail.com/][FastMail]], click
=Settings=, =Calendars=. Then, for the desired calendar, click
=Export=.

#+BEGIN_SRC emacs-lisp
  (use-package org-caldav
    :defer t
    :config
    ;; Local copy
    ;; Store sync state with calendars, simplifying backup
    (setq org-caldav-save-directory koek/calendars-dir)
    (setq org-caldav-inbox (expand-file-name "Afspraken.org" koek/calendars-dir))
    (setq org-caldav-files ())

    ;; Remote copy
    (setq org-caldav-url
          "https://caldav.fastmail.com/dav/calendars/user/nicolas@dejaeghe.re")
    (setq org-caldav-calendar-id "260b63a1-58cd-4cf2-bf6a-a2e5acfcf995"))

  (use-package ox-icalendar
    :defer t
    :config
    (setq org-icalendar-timezone "Europe/Brussels"))
#+END_SRC

* Notes
Configure notes.

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :after org
    :config
    (setq org-roam-directory koek/notes-dir)
    (setq org-roam-index-file (expand-file-name "index.org" koek/notes-dir))
    (org-roam-mode)
    (find-file-noselect org-roam-index-file 'nowarn))
#+END_SRC

* Capture templates                                                   :setup:
#+BEGIN_SRC js :exports none
  ((args) => {
      "use strict";
      const toQuery = (args) => Object.entries(args).map(([key, val]) => `${key}=${val}`).join("&");
      const {protocol, ...rest} = Object.keys(args).reduce((acc, key) => {
          acc[key] = encodeURIComponent(args[key]);
          return acc;
      }, {});
      location.href = `org-protocol://${protocol}?${toQuery(rest)}`;
  })({protocol: "capture", template: "t", url: location.href, title: document.title, body: window.getSelection()});
#+END_SRC

To capture =Bookmark=, =Webpage= and =Book= from the browser, create
three [[https://en.wikipedia.org/wiki/Bookmarklet][bookmarklets]]:

#+CAPTION: Bladwijzer (bookmark)
#+BEGIN_SRC js
  javascript:((args) => {"use strict"; const toQuery = (args) => Object.entries(args).map(([key, val]) => `${key}=${val}`).join("&"); const {protocol, ...rest} = Object.keys(args).reduce((acc, key) => {acc[key] = encodeURIComponent(args[key]); return acc;}, {}); location.href = `org-protocol://${protocol}?${toQuery(rest)}`;})({protocol: "capture", template: "b", url: location.href, title: document.title});
#+END_SRC

#+CAPTION: Notitie (webpage)
#+BEGIN_SRC js
  javascript:((args) => {"use strict"; const toQuery = (args) => Object.entries(args).map(([key, val]) => `${key}=${val}`).join("&"); const {protocol, ...rest} = Object.keys(args).reduce((acc, key) => {acc[key] = encodeURIComponent(args[key]); return acc;}, {}); location.href = `org-protocol://${protocol}?${toQuery(rest)}`;})({protocol: "roam-ref", template: "w", ref: location.href, title: document.title});
#+END_SRC

#+CAPTION: Boek (book)
#+BEGIN_SRC js
  javascript:((args) => {"use strict"; const toQuery = (args) => Object.entries(args).map(([key, val]) => `${key}=${val}`).join("&"); const {protocol, ...rest} = Object.keys(args).reduce((acc, key) => {acc[key] = encodeURIComponent(args[key]); return acc;}, {}); location.href = `org-protocol://${protocol}?${toQuery(rest)}`;})({protocol: "capture", template: "B", url: location.href, body: window.getSelection()});
#+END_SRC

In [[https://www.mozilla.org/en-US/firefox/new/][Firefox]], to show bookmarklets to the left of the menu ([[https://en.wikipedia.org/wiki/Hamburger_button][hamburger]]):

1. Click the menu, Customize
2. In the footer, click Toolbars and show the bookmarks toolbar
3. Move the bookmarks toolbar items placeholder to the toolbar
4. In the footer, click Toolbars and hide the bookmarks toolbar

Bookmarklets placed into the Bookmarks Toolbar group are shown to the
left of the menu.

Configure org capture templates.

#+BEGIN_SRC emacs-lisp
  (use-package org-capture
    :defer t
    :config
    (setq org-capture-templates
          `(("t" "Task" entry (file+olp "Inbox.org" "Taken")
             "* TODO %?"
             :empty-lines 1)
            ("r" "Reply" entry (file+olp "Inbox.org" "Taken")
             ,(string-join '("* TODO Beantwoord %:subject"
                             "DEADLINE: %^t"
                             ""
                             "%a"
                             ""
                             "%?")
                           "\n")
             :empty-lines 1)
            ("a" "Appointment" entry (file "Kalenders/Afspraken.org")
             ,(string-join '("* %^{Name}"
                             "%^T"
                             "%^{LOCATION}p" ; Inserted after heading
                             "%?")
                           "\n")
             :empty-lines 1)
            ("b" "Bookmark" entry (file+olp "Inbox.org" "Bladwijzers")
             ,(string-join '("* %:description %^g"
                             "%a"
                             ""
                             "%?")
                           "\n")
             :empty-lines 1)
            ("B" "Book" item (file+olp "Inbox.org" "Media tips" "Boeken")
             "- [[%:link][%(replace-regexp-in-string (rx (one-or-more \"\\n\")) \" \" \"%i\")]]%?")))
    (setq org-capture-templates-contexts '(("r" ((in-mode . "mu4e-view-mode"))))))
#+END_SRC

Configure roam capture templates.

#+BEGIN_SRC emacs-lisp
  (use-package org-roam-capture
    :defer t
    :config
    (setq org-roam-capture-templates
          `(("n" "Note" plain (function org-roam-capture--get-point)
             "%?"
             :file-name "%<%s>-${slug}"
             :head
             ,(string-join '("# -*- ispell-local-dictionary: \"nl_BE\"; -*-"
                             ""
                             "#+TITLE: ${title}"
                             ""
                             "")
                           "\n")
             :unnarrowed t)))
    (setq org-roam-capture-immediate-template
          (append (seq-find (pcase-lambda (`(,key))
                              (string= key "n"))
                            org-roam-capture-templates)
                  '(:immediate-finish t)))
    (setq org-roam-capture-ref-templates
          `(("w" "Webpage" plain (function org-roam-capture--get-point)
             "%?"
             :file-name "%(secure-hash 'md5 \"${ref}\")" ; One note per reference
             :head
             ,(string-join '("# -*- ispell-local-dictionary: \"nl_BE\"; -*-"
                             ""
                             "#+TITLE: ${title}"
                             "#+ROAM_KEY: ${ref}"
                             ""
                             "")
                           "\n")
             :unnarrowed t))))
#+END_SRC

* E-mail accounts
Configure e-mail accounts. For server details, see [[file:~/.ststore/documents/Projecten/Dotfiles/dotfiles/dotfiles.org::*isync][isync]], specifically
the instructions on storing passwords.

#+BEGIN_SRC emacs-lisp
  (use-package mu4e-vars
    :defer t
    :config
    (use-package mu4e-context
      :config
      (declare-function mu4e-message-field "mu4e-message")

      (setq mu4e-contexts
            (list (make-mu4e-context
                   :name "Personal"
                   :match-func
                   (lambda (message)
                     (when message
                       (string-prefix-p "/Personal/"
                                        (mu4e-message-field message :maildir))))
                   :vars
                   `((smtpmail-smtp-server   . "smtp.fastmail.com")
                     (smtpmail-smtp-service  . 465)
                     (smtpmail-stream-type   . ssl)
                     ;; refile-folder, drafts-folder, sent-folder and
                     ;; trash-folder are directory file names, i.e., no
                     ;; trailing /
                     (mu4e-refile-folder     . "/Personal/Archive")
                     (mu4e-drafts-folder     . "/Personal/Drafts")
                     (mu4e-sent-folder       . "/Personal/Sent")
                     (mu4e-trash-folder      . "/Personal/Trash")
                     (mu4e-compose-signature . ,user-full-name))))))

    (use-package mu4e-utils
      :config
      (setq mu4e-bookmarks
            '((:name "Personal INBOX"
               :query "maildir:/Personal/INBOX"
               :key ?p)
              (:name "Applied Artificial Intelligence"
               :query "maildir:/Personal/Opleidingen/AAI"
               :key ?a)
              (:name "Unread"
               :query "flag:unread"
               :key ?u)))))
#+END_SRC

* News feeds
Configure news feeds.

#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :defer t
    :preface
    (declare-function elfeed-db-get-feed "elfeed-db")
    (declare-function elfeed-meta--put "elfeed-db")

    (defvar koek/feeds
      '(("3Blue1Brown" youtube "UCYO_jab_esuFRV4b17AJtAw" mathematics)
        ("Arch Linux" "https://www.archlinux.org/feeds/news/" notice linux)
        ("Baggers" youtube "UCMV8p6Lb-bd6UZtTc_QD4zA" lisp)
        ("Caches to Caches" "http://cachestocaches.com/feed" blog ai)
        ("Clickspring" youtube "UCworsKCR-Sx6R6-BnIjS2MA" metalwork)
        ("Clojure" reddit month "Clojure" clojure)
        ("ClojureTV" youtube "UCaLlzGqiPE2QRj6sSOawJRg" clojure)
        ("Emacs" reddit "emacs" emacs)
        ("Erlang Solutions" youtube "UCKrD_GYN3iDpG_uMmADPzJQ" erlang)
        ("Erlang" reddit month "erlang" erlang)
        ("Factorio" "https://www.factorio.com/blog/rss" blog program)
        ("Furniture Making" reddit month "FurnitureMaking" woodwork)
        ("Ishitani Furniture" youtube "UC7FkqjV8SU5I8FCHXQSQe9Q" woodwork)
        ("John Heisz" youtube "UCjA8vRlL1c7BDixQRJ39-LQ" woodwork)
        ("LEGO" reddit month "lego" lego)
        ("Layout Land" youtube "UC7TizprGknbDalbHplROtag" css)
        ("Linux" reddit month "linux" linux)
        ("Lisp" reddit month "lisp" lisp)
        ("LiveOverflow" youtube "UClcE-kVhqyiHCcjYwcpfj9w" hack)
        ("Luke Smith" youtube "UC2eYFnH61tmytImy1mTYvhA" foss)
        ("Mastering Emacs" "https://www.masteringemacs.org/feed" blog emacs)
        ("Netflix TechBlog" "https://medium.com/feed/netflix-techblog" blog ai)
        ("Professor Leonard" youtube "UCoHhuummRZaIVX7bD4t2czg" mathematics)
        ("Programming" reddit month "programming" program)
        ("Protesilaos Stavrou" youtube "UC0uTPqBCFIpZxlz_Lv1tk_g" emacs)
        ("ROBOHEMIAN!" youtube "UCPelotG5UTbWYKrMfG0ynKg" electronics)
        ("Rainfall Projects" youtube "UCPO4D4-UeeFQceK8XrgwXug" woodwork metalwork)
        ("Sacha Chua" "http://sachachua.com/blog/category/emacs/feed/" blog emacs)
        ("Two-Bit History" "https://twobithistory.org/feed.xml" blog history)
        ("Wait But Why" "https://waitbutwhy.com/feed" blog popsci)
        ("frank howarth" youtube "UC3_VCOJMaivgcGqPCTePLBA" woodwork)
        ("krtwood" youtube "UCrI3NWmFF45LwKwk5TEYihQ" woodwork)
        ("scanlime" youtube "UCaEgw3321ct_PE4PJvdhXEQ" electronics))
      "List of news feeds.
  News feed is a list of format:

  '(\"title\" \"url\" tag-1 tag-2 tag-n) or
  '(\"title\" reddit \"id\" tag-1 tag-2 tag-n) or
  '(\"title\" reddit month \"id\" tag-1 tag-2 tag-n) or
  '(\"title\" youtube \"id\" tag-1 tag-2 tag-n)

  Reddit news feeds are tagged with post and YouTube news feeds are
  tagged with video.")

    (defun koek/add-feed (title url &rest tags)
      "Add news feed to the database.
  TITLE and URL are strings.  TAGS are zero or more symbols."
      (setf (elfeed-meta (elfeed-db-get-feed url) :title) title)
      (push (cons url tags) elfeed-feeds))
    :config
    (setq elfeed-db-directory koek/news-dir)

    (use-package recentf
      :config
      (push elfeed-db-directory recentf-exclude))

    (dolist (feed koek/feeds)
      (let ((args
             (pcase feed
               (`(,title reddit month ,id . ,tags)
                `(,(concat title " (Reddit - Month)")
                  ,(format "https://www.reddit.com/r/%s/top.rss?t=month" id)
                  post ,@tags))
               (`(,title reddit ,id . ,tags)
                `(,(concat title " (Reddit)")
                  ,(format "https://www.reddit.com/r/%s/top.rss?t=week" id)
                  post ,@tags))
               (`(,title youtube ,id . ,tags)
                `(,(concat title " (YouTube)")
                  ,(format "https://www.youtube.com/feeds/videos.xml?channel_id=%s" id)
                  video ,@tags))
               (_feed
                feed))))
        (apply #'koek/add-feed args))))
#+END_SRC

* Initial buffer
Show agenda as initial buffer.

#+BEGIN_SRC emacs-lisp
  (defun koek/make-initial-buffer ()
    "Return initial buffer."
    (let ((layout (current-window-configuration)))
      (org-agenda-list)
      (set-window-configuration layout))
    (get-buffer "*Org Agenda*"))

  (setq initial-buffer-choice #'koek/make-initial-buffer)
#+END_SRC

* Footer
#+BEGIN_SRC emacs-lisp
  ;;; 90-personal.el ends here
#+END_SRC
